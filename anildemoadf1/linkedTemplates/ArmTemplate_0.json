{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "anildemoadf1"
		},
		"demorgstorageadbAccKey_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'demorgstorageadbAccKey'"
		},
		"demorgstorageadbSPN_servicePrincipalCredential": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalCredential' of 'demorgstorageadbSPN'"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://devi-key-vault.vault.azure.net/"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://weatherbit-v1-mashape.p.rapidapi.com/forecast/3hourly"
		},
		"demorgstorageadbAccKey_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://demorgstorageadb.dfs.core.windows.net/"
		},
		"demorgstorageadbSPN_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://demorgstorageadb.dfs.core.windows.net/"
		},
		"demorgstorageadbSPN_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "a2f63451-96e0-4fd4-84c5-49c56f2774ea"
		},
		"demorgstorageadbSPN_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "438d39c1-9cd6-4c1e-ac54-b34859c90b9d"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [
					"stgsecret"
				],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"lat": {
						"type": "string"
					},
					"lon": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous",
					"authHeaders": {
						"X-RapidAPI-Key": {
							"type": "SecureString",
							"value": "**********"
						},
						"X-RapidAPI-Host": {
							"type": "SecureString",
							"value": "**********"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/demorgstorageadbAccKey')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('demorgstorageadbAccKey_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('demorgstorageadbAccKey_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/demorgstorageadbSPN')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('demorgstorageadbSPN_properties_typeProperties_url')]",
					"azureCloudType": "AzurePublic",
					"tenant": "[parameters('demorgstorageadbSPN_properties_typeProperties_tenant')]",
					"servicePrincipalId": "[parameters('demorgstorageadbSPN_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredentialType": "ServicePrincipalKey",
					"servicePrincipalCredential": {
						"type": "SecureString",
						"value": "[parameters('demorgstorageadbSPN_servicePrincipalCredential')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelfHosted')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/flowlet1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Flowlet",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [
						{
							"name": "OriginAggVol"
						},
						{
							"name": "input1"
						},
						{
							"name": "output1"
						}
					],
					"scriptLines": [
						"input(output(",
						"          trans_date as date,",
						"          Airport as string,",
						"          Flight as string,",
						"          Carrier as string,",
						"          BusinessDI as string,",
						"          AWBBoundID as integer,",
						"          Origin as string,",
						"          Destination as string,",
						"          CargoTypeCommoditygroup as string,",
						"          CustomerCategory as string,",
						"          VolumeTonnage as float",
						"     ),",
						"     order: 0,",
						"     allowSchemaDrift: true) ~> input1",
						"input1 aggregate(groupBy(trans_date,",
						"          Origin),",
						"     VolumeTonnage = sum(VolumeTonnage)) ~> OriginAggVol",
						"OriginAggVol output() ~> output1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/flowlet11')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Flowlet",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "input1"
						},
						{
							"name": "output1"
						}
					],
					"scriptLines": [
						"input(output(",
						"          Date as date,",
						"          Airport as string,",
						"          Flight as string,",
						"          Carrier as string,",
						"          BusinessDI as string,",
						"          AWBBoundID as string,",
						"          Origin as string,",
						"          Destination as string,",
						"          CargoTypeCommoditygroup as string,",
						"          CustomerCategory as string,",
						"          VolumeTonnage as float",
						"     ),",
						"     order: 0,",
						"     allowSchemaDrift: true) ~> input1",
						"input1 aggregate(groupBy(Origin,",
						"          Destination,",
						"          CustomerCategory),",
						"     VolumeTonnage = sum(VolumeTonnage)) ~> aggregate1",
						"aggregate1 output() ~> output1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfcdc1')]",
			"type": "Microsoft.DataFactory/factories/adfcdcs",
			"apiVersion": "2018-06-01",
			"properties": {
				"SourceConnectionsInfo": [
					{
						"SourceEntities": [
							{
								"name": "stgin/cdc",
								"properties": {
									"schema": [],
									"dslConnectorProperties": [
										{
											"name": "container",
											"value": "stgin"
										},
										{
											"name": "fileSystem",
											"value": "stgin"
										},
										{
											"name": "folderPath",
											"value": "cdc"
										}
									]
								}
							}
						],
						"Connection": {
							"linkedServiceType": "AzureBlobFS",
							"type": "linkedservicetype",
							"isInlineDataset": true,
							"commonDslConnectorProperties": [
								{
									"name": "allowSchemaDrift",
									"value": true
								},
								{
									"name": "inferDriftedColumnTypes",
									"value": true
								},
								{
									"name": "format",
									"value": "delimited"
								},
								{
									"name": "dateFormats",
									"value": [
										"MM/dd/yyyy",
										"dd/MM/yyyy",
										"yyyy/MM/dd",
										"MM-dd-yyyy",
										"dd-MM-yyyy",
										"yyyy-MM-dd",
										"dd.MM.yyyy",
										"MM.dd.yyyy",
										"yyyy.MM.dd"
									]
								},
								{
									"name": "timestampFormats",
									"value": [
										"yyyyMMddHHmm",
										"yyyyMMdd HHmm",
										"yyyyMMddHHmmss",
										"yyyyMMdd HHmmss",
										"dd-MM-yyyy HH:mm:ss",
										"dd-MM-yyyy HH:mm",
										"yyyy-M-d H:m:s",
										"yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'",
										"yyyy-M-d\\'T\\'H:m:s\\'Z\\'",
										"yyyy-M-d\\'T\\'H:m:s",
										"yyyy-MM-dd\\'T\\'HH:mm:ss",
										"yyyy-MM-dd HH:mm:ss",
										"yyyy-MM-dd HH:mm",
										"yyyy.MM.dd HH:mm:ss",
										"MM/dd/yyyy HH:mm:ss",
										"M/d/yyyy H:m:s",
										"yyyy/MM/dd HH:mm:ss",
										"yyyy/M/d H:m:s",
										"dd MMM yyyy HH:mm:ss",
										"dd MMMM yyyy HH:mm:ss",
										"d MMM yyyy H:m:s",
										"d MMMM yyyy H:m:s",
										"d-M-yyyy H:m:s",
										"d-M-yyyy H:m",
										"yyyy-M-d H:m",
										"MM/dd/yyyy HH:mm",
										"M/d/yyyy H:m",
										"yyyy/MM/dd HH:mm",
										"yyyy/M/d H:m",
										"dd MMMM yyyy HH:mm",
										"dd MMM yyyy HH:mm",
										"d MMMM yyyy H:m",
										"d MMM yyyy H:m",
										"MM-dd-yyyy hh:mm:ss a",
										"MM-dd-yyyy HH:mm:ss",
										"MM/dd/yyyy hh:mm:ss a",
										"yyyy.MM.dd hh:mm:ss a",
										"MM/dd/yyyy",
										"dd/MM/yyyy",
										"yyyy/MM/dd",
										"MM-dd-yyyy",
										"dd-MM-yyyy",
										"yyyy-MM-dd",
										"dd.MM.yyyy",
										"MM.dd.yyyy",
										"yyyy.MM.dd"
									]
								},
								{
									"name": "enableCdc",
									"value": true
								},
								{
									"name": "skipInitialLoad",
									"value": true
								},
								{
									"name": "columnNamesAsHeader",
									"value": true
								},
								{
									"name": "columnDelimiter",
									"value": ","
								},
								{
									"name": "quoteChar",
									"value": "\\\""
								},
								{
									"name": "escapeChar",
									"value": "\\\\"
								}
							]
						}
					}
				],
				"TargetConnectionsInfo": [
					{
						"TargetEntities": [
							{
								"name": "stgout/cdcoutput",
								"properties": {
									"schema": [],
									"dslConnectorProperties": [
										{
											"name": "container",
											"value": "stgout"
										},
										{
											"name": "fileSystem",
											"value": "stgout"
										},
										{
											"name": "folderPath",
											"value": "cdcoutput"
										}
									]
								}
							}
						],
						"Connection": {
							"linkedServiceType": "AzureBlobFS",
							"type": "linkedservicetype",
							"isInlineDataset": true,
							"commonDslConnectorProperties": [
								{
									"name": "allowSchemaDrift",
									"value": true
								},
								{
									"name": "inferDriftedColumnTypes",
									"value": true
								},
								{
									"name": "format",
									"value": "delimited"
								},
								{
									"name": "columnNamesAsHeader",
									"value": true
								},
								{
									"name": "columnDelimiter",
									"value": ","
								},
								{
									"name": "escapeChar",
									"value": "\\\\"
								},
								{
									"name": "quoteChar",
									"value": "\\\""
								}
							]
						},
						"DataMapperMappings": [
							{
								"targetEntityName": "stgout/cdcoutput",
								"sourceEntityName": "stgin/cdc",
								"sourceConnectionReference": {
									"connectionName": "AzureDataLakeStorageInput",
									"type": "linkedservicetype"
								},
								"attributeMappingInfo": {
									"attributeMappings": []
								}
							}
						],
						"Relationships": []
					}
				],
				"Policy": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1
					},
					"mode": "Microbatch"
				},
				"status": "Stopped",
				"allowVNetOverride": false,
				"id": "e8489d229b0a4d40be75709c8c6b383e"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Avro1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "demorgstorageadbSPN",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Avro",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "stream"
					}
				},
				"schema": {
					"type": "record",
					"name": "Microsoft.ServiceBus.Messaging.EventData",
					"fields": [
						{
							"name": "SequenceNumber",
							"type": "long"
						},
						{
							"name": "Offset",
							"type": "string"
						},
						{
							"name": "EnqueuedTimeUtc",
							"type": "string"
						},
						{
							"name": "SystemProperties",
							"type": {
								"type": "map",
								"values": [
									"long",
									"double",
									"string",
									"bytes"
								]
							}
						},
						{
							"name": "Properties",
							"type": {
								"type": "map",
								"values": [
									"long",
									"double",
									"string",
									"bytes",
									"null"
								]
							}
						},
						{
							"name": "Body",
							"type": [
								"null",
								"bytes"
							]
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/demorgstorageadbSPN')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "demorgstorageadbSPN",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "aaaaaa",
						"fileSystem": "stgin"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/demorgstorageadbSPN')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "demorgstorageadbAccKey",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "streamoutput"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "city",
						"type": "UTF8"
					},
					{
						"name": "latitude",
						"type": "DOUBLE"
					},
					{
						"name": "longitude",
						"type": "DOUBLE"
					},
					{
						"name": "temperature",
						"type": "DOUBLE"
					},
					{
						"name": "EventProcessedUtcTime",
						"type": "INT96"
					},
					{
						"name": "PartitionId",
						"type": "INT64"
					},
					{
						"name": "EventEnqueuedUtcTime",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/demorgstorageadbAccKey')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference",
					"parameters": {
						"lat": "35.5",
						"lon": "-78.5"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "demorgstorageadbAccKey",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "weatherdata",
						"fileSystem": "stgin"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/demorgstorageadbAccKey')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/airportAgg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "demorgstorageadbAccKey",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "adfoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/demorgstorageadbAccKey')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/airportOriginAgg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "demorgstorageadbSPN",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "airportOriginAgg",
						"fileSystem": "adfoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/demorgstorageadbSPN')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvAirport')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "demorgstorageadbSPN",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Samplefiles",
						"fileSystem": "stgin"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Airport",
						"type": "String"
					},
					{
						"name": "Flight",
						"type": "String"
					},
					{
						"name": "Carrier",
						"type": "String"
					},
					{
						"name": "BusinessDI",
						"type": "String"
					},
					{
						"name": "AWBBoundID",
						"type": "String"
					},
					{
						"name": "Origin",
						"type": "String"
					},
					{
						"name": "Destination",
						"type": "String"
					},
					{
						"name": "CargoTypeCommoditygroup",
						"type": "String"
					},
					{
						"name": "CustomerCategory",
						"type": "String"
					},
					{
						"name": "VolumeTonnage",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/demorgstorageadbSPN')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineAPI')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"blockSizeInMB": 4
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RestResource1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "WeatherOutput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-04T23:43:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource1')]",
				"[concat(variables('factoryId'), '/datasets/WeatherOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineAvro')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AvroSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.avro",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "SequenceNumber",
											"type": "Int64",
											"physicalType": "long"
										},
										"sink": {
											"name": "SequenceNumber",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Offset",
											"type": "String",
											"physicalType": "string"
										},
										"sink": {
											"name": "Offset",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "EnqueuedTimeUtc",
											"type": "String",
											"physicalType": "string"
										},
										"sink": {
											"name": "EnqueuedTimeUtc",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "SystemProperties",
											"type": "map",
											"physicalType": "map"
										},
										"sink": {
											"name": "SystemProperties",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Properties",
											"type": "map",
											"physicalType": "map"
										},
										"sink": {
											"name": "Properties",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Body",
											"type": "null | bytes",
											"physicalType": "null | bytes"
										},
										"sink": {
											"name": "Body",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Avro1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-03T21:24:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Avro1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineParquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "city",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "city",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "latitude",
											"type": "Double",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "latitude",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "longitude",
											"type": "Double",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "longitude",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "temperature",
											"type": "Double",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "temperature",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "EventProcessedUtcTime",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "EventProcessedUtcTime",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "PartitionId",
											"type": "Int64",
											"physicalType": "INT64"
										},
										"sink": {
											"name": "PartitionId",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "EventEnqueuedUtcTime",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "EventEnqueuedUtcTime",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Parquet1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-03T19:33:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Parquet1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "csvAirport",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "airportAgg",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Date as date,",
						"          Airport as string,",
						"          Flight as string,",
						"          Carrier as string,",
						"          BusinessDI as string,",
						"          AWBBoundID as string,",
						"          Origin as string,",
						"          Destination as string,",
						"          CargoTypeCommoditygroup as string,",
						"          CustomerCategory as string,",
						"          VolumeTonnage as float",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('dynamicRange', 2,",
						"          Origin,",
						"          Destination,",
						"          CustomerCategory",
						"     )) ~> source1",
						"source1 aggregate(groupBy(Origin,",
						"          Destination,",
						"          CustomerCategory),",
						"     VolumeTonnage = sum(VolumeTonnage)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/csvAirport')]",
				"[concat(variables('factoryId'), '/datasets/airportAgg')]"
			]
		}
	]
}